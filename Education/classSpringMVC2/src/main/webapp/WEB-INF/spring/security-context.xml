<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:security="http://www.springframework.org/schema/security"
xsi:schemaLocation="http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security.xsd
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd">


<bean id="customAccessDenied" class="net.daum.security.CustomAccessDeniedHandler" />
	<!-- CustomAccessDeniedHandler클래스의 빈아이디 객체명 customAccessDenied를 생성함. -->
	
	<bean id="customLoginSuccess" class="net.daum.security.CustomLoginSuccessHandler" />
	<!-- 로그인 성공시 호출됨! -->
	
	<!--  <bean id="customPasswordEncoder" class="net.daum.security.CustomNoOpPasswordEncoder"/>
	 CustomNoOpPasswordEncoder 클래스의  빈아이디 객체명 customPasswordEncoder를 생성  --> <!-- 주석 처리하고 아래 코드 가져옴 -->
	
	<bean id="bcryptPasswordEncoder"
         class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
   <!-- 
         1.스프링 시큐리티에서 제공하는 BCryptPasswordEncoder 클래스를 이용해서 비번을 암호화 처리한다.
         2.bcrypt는 태생 자체가 패스워드를 저장하는 용도로 설계된 것으로 특정 문자열을 암호화 한다.
           체크하는 쪽에서는 암호화 된 패스워드가 가능한 패스워드 인지만 확인하고 다시 원래 원문으로 되돌리지는 못한다.                   
   -->
	
	
	
	<bean id="customeUserDetailsService"
		class="net.daum.security.CustomUserDetailsService" />
	<!--  스프링 시큐리티 자동 로그인과 연관된 부분 -->
	
	
	

<security:http> <!-- 스프링 시큐리티가 http 인터넷 웹(www)에서 알 수 있게 하는 시작 시점을 설정 -->
		
		<security:intercept-url pattern="/sample/all" access="permitAll" />
		<!-- url 매핑주소에 접근할 때 인터셉터(가로채기:필터)를 이용해서 접근을 제한하는 설정은
			security:intercept-url을 사용한다. pattern속성값으로 컨트롤러에서 지정한 매핑주소가 들어간다.
			access 속성값에는 권한 범위가 들어간다. permitAll은 모든 사용자를 허용한다.  -->
		<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')" />
		<!-- ROLE_MEMBER는 로그인한 사용자만 접근할 수 있다. -->
		
		<security:intercept-url pattern="/sample/admin"
		access="hasRole('ROLE_ADMIN')" />
		<!-- 로그인 한 사용자들 중에 관리자 권한을 가진 사용자만이 접근할 수 있다. -->
		
		<!--<security:access-denied-handler error-page="/accessError"/>
		 	403 접근금지 에러가 발생했을 때 accessError 매핑주소가 실행되게 한다. -->
				
		<security:access-denied-handler ref="customAccessDenied" />
		<!-- 403 접근금지 에러가 발생했을 때 빈 아이디 customAccessDenied를 호출 -->		
		
		
		<!-- <security:form-login/>  시큐리티 폼 로그인 설정 : 스프링 시큐리티에서 제공하는 내장 폼 로그인이 실행 -->
		
		
		<security:form-login login-page="/customLogin" 
		authentication-success-handler-ref="customLoginSuccess" />
		<!-- 사용자 정의(커스텀) 로그인 페이지로 이동하는 매핑주소 /customLogin 등록,
		authentication-success-handler-ref 속성은 로그인 성공시 빈아이디 customLoginSuccess를 호출함.	 -->
		
		
		<security:remember-me data-source-ref="dataSource"
		token-validity-seconds="604800" />
		<!-- remember-me는 시큐리티 자동로그인, data-source-ref="dataSource"는 root-context.xml
		빈 아이디를 호출해서 오라클 연결, token-validity-seconds 초단위 쿠키 유효시간 -->
		
		
		<security:logout logout-url="/customLogout" invalidate-session="true"
		delete-cookies="remember-me" />
		<!-- 로그아웃 시 customLogout 매핑주소가 실행됨. 
		invalidate-session="true"는 로그아웃시 세션 무효화 즉 로그아웃 처리,
		delete-cookies="remember-me" 자동로그인에서 사용하는 쿠키이름을 삭제 -->
		
	</security:http>
	
	
<security:authentication-manager> <!-- 인증관리자 생성 -->
	<security:authentication-provider user-service-ref="customeUserDetailsService"> 
	<!-- 인증 제공자 -->  <!-- 시큐리티 인증 제공자에서  customeUserDetailsService빈아이디를 호출 -->
	
		<security:password-encoder ref="bcryptPasswordEncoder"/>
	<!-- 빈아이디  bcryptPasswordEncoder를 호출해서 비번 암호화 -->
	
	
	</security:authentication-provider>
</security:authentication-manager>

</beans>
